!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! Author: P. Kestener, CEA Saclay
!!
!!
!! This software is governed by the CeCILL license under French law and
!! abiding by the rules of distribution of free software.  You can  use, 
!! modify and/ or redistribute the software under the terms of the CeCILL
!! license as circulated by CEA, CNRS and INRIA at the following URL
!! "http://www.cecill.info".
!!
!! The fact that you are presently reading this means that you have had
!! knowledge of the CeCILL license and that you accept its terms.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!< Defines some usefull pointwise routines
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
module HydroUtils_gpu

  use HydroPrecision
  use HydroConstants
  use HydroParameters
  use HydroParameters_gpu

  use cudaFor

contains

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! equation of state (ideal gas)
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine eos(rho,eint,p,c)

    implicit none

    ! dummy variables
    real(fp_kind), intent(in)    :: rho  !< density
    real(fp_kind), intent(in)    :: eint !< internal energy
    real(fp_kind), intent(inout) :: p    !< pressure
    real(fp_kind), intent(inout) :: c    !< speed of sound

    p = max ( (d_gamma0 - 1.0) * rho * eint, rho * d_smallp)
    c = sqrt(  d_gamma0 * p / rho)

  end subroutine eos

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! Compute primitive variables
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine computePrimitives(data,i,j,c,qLoc)

    implicit none

    ! dummy variables
    real(fp_kind), dimension(d_isize, d_jsize, nbVar), intent(inout), device :: data !< should u or u2
    integer                         , intent(in)    :: i,j
    real(fp_kind)                   , intent(out)   :: c
    real(fp_kind), dimension(nbVar) , intent(out)   :: qLoc ! primitive var

    ! local variables
    real(fp_kind), dimension(nbVar) :: uLoc ! local conservative variables
    real(fp_kind)                   :: eken ! kinetic energy
    real(fp_kind)                   :: e    ! total energy

    ! retrieve u local
    uLoc(ID) = data(i,j,ID)
    uLoc(IP) = data(i,j,IP)
    uLoc(IU) = data(i,j,IU)
    uLoc(IV) = data(i,j,IV)

    ! compute primitive variables
    qLoc(ID) = max(uLoc(ID), d_smallr)
    qLoc(IU) = uLoc(IU) / qLoc(ID)
    qLoc(IV) = uLoc(IV) / qLoc(ID)

    eken = 0.5 * (qLoc(IU) * qloc(IU) + qLoc(IV) * qLoc(IV))
    e = uLoc(IP) / qLoc(ID) - eken
    !if (e < 0) then
    !   write(*,*) 'FATAL ERROR : hydro eint < 0  : e ', uLoc(IP), 'eken ',eken,' d ',uLoc(ID),' u ',uLoc(IU),' v ',uLoc(IV)
    !   stop
    !end if

    ! retrieve pressure from equation of state
    call eos(qLoc(ID), e, qLoc(IP), c)

  end subroutine computePrimitives

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! Compute primitive variables
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine constoprim_2d(uLoc,qLoc,c)

    implicit none

    ! dummy variables
    real(fp_kind), dimension(nbVar), intent(in)   , device :: uLoc ! conservative var
    real(fp_kind), dimension(nbVar), intent(inout), device :: qLoc ! primitive var
    real(fp_kind),                   intent(inout)         :: c    ! sound speed

    ! local variables
    real(fp_kind)                   :: eken ! kinetic energy
    real(fp_kind)                   :: e    ! total energy

    ! compute primitive variables
    qLoc(ID) = max(uLoc(ID), d_smallr)
    qLoc(IU) = uLoc(IU) / qLoc(ID)
    qLoc(IV) = uLoc(IV) / qLoc(ID)

    eken = 0.5 * (qLoc(IU) * qloc(IU) + qLoc(IV) * qLoc(IV))
    e = uLoc(IP) / qLoc(ID) - eken
    !if (e < 0) then
    !   write(*,*) 'FATAL ERROR : hydro eint < 0  : e ', uLoc(IP), 'eken ',eken,' d ',uLoc(ID),' u ',uLoc(IU),' v ',uLoc(IV)
    !   stop
    !end if

    ! retrieve pressure from equation of state
    call eos(qLoc(ID), e, qLoc(IP), c)

  end subroutine constoprim_2d



  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! Trace computation
  !! q          : Primitive variables state.
  !! qNeighbors : state in the neighbor cells (2 neighbors per dimension)
  !! c          : local sound speed.
  !! dtdx       : dt over dx
  !! dtdy       : dt over dy
  !! qm         : qm state (one per dimension)
  !! qp         : qp state (one per dimension)
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine trace_unsplit_2d(qLoc, qNeighbors, dtdx, dtdy, qm, qp)

    implicit none

    ! dummy variables
    real(fp_kind), dimension(nbVar)   , intent(in)  :: qLoc
    real(fp_kind), dimension(4, nbVar), intent(in)  :: qNeighbors
    real(fp_kind)                     , intent(in)  :: dtdx
    real(fp_kind)                     , intent(in)  :: dtdy
    real(fp_kind), dimension(2, nbVar), intent(out) :: qm
    real(fp_kind), dimension(2, nbVar), intent(out) :: qp

    ! local variables
    real(fp_kind), dimension(2, nbVar) :: dq    ! slopes array

    real(fp_kind) :: r,p,u,v

    ! TVD slopes in all directions
    real(fp_kind) :: drx,dpx,dux,dvx
    real(fp_kind) :: dry,dpy,duy,dvy

    ! source terms variables
    real(fp_kind) ::  sr0,sp0,su0,sv0

    ! first compute slopes
    call slope_unsplit_hydro_2d(qLoc, qNeighbors, dq)

    r = qLoc(ID)
    p = qLoc(IP)
    u = qLoc(IU)
    v = qLoc(IV)

    drx = dq(1,ID)
    dpx = dq(1,IP)
    dux = dq(1,IU)
    dvx = dq(1,IV)

    dry = dq(2,ID)
    dpy = dq(2,IP)
    duy = dq(2,IU)
    dvy = dq(2,IV)

    ! source terms (with transverse derivatives)
    sr0 = -u*drx-v*dry - (dux+dvy)*r
    sp0 = -u*dpx-v*dpy - (dux+dvy)*d_gamma0*p
    su0 = -u*dux-v*duy - (dpx    )/r
    sv0 = -u*dvx-v*dvy - (dpy    )/r

    ! Right state at left interface
    qp(1,ID) = r - HALF_F*drx + sr0*dtdx*HALF_F
    qp(1,IP) = p - HALF_F*dpx + sp0*dtdx*HALF_F
    qp(1,IU) = u - HALF_F*dux + su0*dtdx*HALF_F
    qp(1,IV) = v - HALF_F*dvx + sv0*dtdx*HALF_F
    qp(1,ID) = max(d_smallr, qp(1,ID))

    ! Left state at right interface
    qm(1,ID) = r + HALF_F*drx + sr0*dtdx*HALF_F
    qm(1,IP) = p + HALF_F*dpx + sp0*dtdx*HALF_F
    qm(1,IU) = u + HALF_F*dux + su0*dtdx*HALF_F
    qm(1,IV) = v + HALF_F*dvx + sv0*dtdx*HALF_F
    qm(1,ID) = max(d_smallr, qm(1,ID))

    ! Top state at bottom interface
    qp(2,ID) = r - HALF_F*dry + sr0*dtdy*HALF_F
    qp(2,IP) = p - HALF_F*dpy + sp0*dtdy*HALF_F
    qp(2,IU) = u - HALF_F*duy + su0*dtdy*HALF_F
    qp(2,IV) = v - HALF_F*dvy + sv0*dtdy*HALF_F
    qp(2,ID) = max(d_smallr, qp(2,ID))

    ! Bottom state at top interface
    qm(2,ID) = r + HALF_F*dry + sr0*dtdy*HALF_F
    qm(2,IP) = p + HALF_F*dpy + sp0*dtdy*HALF_F
    qm(2,IU) = u + HALF_F*duy + su0*dtdy*HALF_F
    qm(2,IV) = v + HALF_F*dvy + sv0*dtdy*HALF_F
    qm(2,ID) = max(d_smallr, qm(2,ID))

  end subroutine trace_unsplit_2d

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! Compute trace hydro 2d
  !! Slopes are compute outside, so slope are input to this
  !! routine
  !!
  !! \param[in]  q  primitive variable state vector
  !! \param[in]  dq primitive variable slopes
  !! \param[in]  dtdx dt divided by dx
  !! \param[in]  dtdy dt divided by dy
  !! \param[out] qm
  !! \param[out] qp
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine trace_unsplit_hydro_2d(qLoc, dq, dtdx, dtdy, qm, qp)

    implicit none

    ! dummy variables
    real(fp_kind), dimension(nbVar)   , intent(in)  :: qLoc
    real(fp_kind), dimension(2,nbVar) , intent(in)  :: dq
    real(fp_kind)                     , intent(in)  :: dtdx
    real(fp_kind)                     , intent(in)  :: dtdy
    real(fp_kind), dimension(2, nbVar), intent(out) :: qm
    real(fp_kind), dimension(2, nbVar), intent(out) :: qp

    ! local variables
    real(fp_kind) :: r,p,u,v
    real(fp_kind) :: sr0,sp0,su0,sv0

    ! TVD slopes in all directions
    real(fp_kind) :: drx,dpx,dux,dvx
    real(fp_kind) :: dry,dpy,duy,dvy

    ! initialize cell centered values
    r = qLoc(ID)
    p = qLoc(IP)
    u = qLoc(IU)
    v = qLoc(IV)

    ! Init cell centered TVD slopes in X direction
    drx = dq(IX,ID);  drx = drx * HALF_F
    dpx = dq(IX,IP);  dpx = dpx * HALF_F
    dux = dq(IX,IU);  dux = dux * HALF_F
    dvx = dq(IX,IV);  dvx = dvx * HALF_F

    ! Init cell centered TVD slopes in Y direction
    dry = dq(IY,ID);  dry = dry * HALF_F
    dpy = dq(IY,IP);  dpy = dpy * HALF_F
    duy = dq(IY,IU);  duy = duy * HALF_F
    dvy = dq(IY,IV);  dvy = dvy * HALF_F


    sr0 = (-u*drx-dux*r)       *dtdx + (-v*dry-dvy*r)       *dtdy
    su0 = (-u*dux-dpx/r)       *dtdx + (-v*duy      )       *dtdy
    sv0 = (-u*dvx      )       *dtdx + (-v*dvy-dpy/r)       *dtdy
    sp0 = (-u*dpx-dux*d_gamma0*p)*dtdx + (-v*dpy-dvy*d_gamma0*p)*dtdy

    ! Update in time the  primitive variables
    r = r + sr0
    u = u + su0
    v = v + sv0
    p = p + sp0

    ! Face averaged right state at left interface
    qp(1,ID) = r - drx
    qp(1,IU) = u - dux
    qp(1,IV) = v - dvx
    qp(1,IP) = p - dpx
    qp(1,ID) = max(d_smallR,  qp(1,ID))
    qp(1,IP) = max(d_smallp * qp(1,ID), qp(1,IP))

    ! Face averaged left state at right interface
    qm(1,ID) = r + drx
    qm(1,IU) = u + dux
    qm(1,IV) = v + dvx
    qm(1,IP) = p + dpx
    qm(1,ID) = max(d_smallR,  qm(1,ID))
    qm(1,IP) = max(d_smallp * qm(1,ID), qm(1,IP))

    ! Face averaged top state at bottom interface
    qp(2,ID) = r - dry
    qp(2,IU) = u - duy
    qp(2,IV) = v - dvy
    qp(2,IP) = p - dpy
    qp(2,ID) = max(d_smallR,  qp(2,ID))
    qp(2,IP) = max(d_smallp * qp(2,ID), qp(2,IP))

    ! Face averaged bottom state at top interface
    qm(2,ID) = r + dry
    qm(2,IU) = u + duy
    qm(2,IV) = v + dvy
    qm(2,IP) = p + dpy
    qm(2,ID) = max(d_smallR,  qm(2,ID))
    qm(2,IP) = max(d_smallp * qm(2,ID), qm(2,IP))

  end subroutine trace_unsplit_hydro_2d



  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! Compute hydro slopes
  !!
  !! \param[in]  q       : current primitive variable state
  !! \param[in]  qPlusX  : state in the next neighbor cell along XDIR
  !! \param[in]  qMinusX : state in the previous neighbor cell along XDIR
  !! \param[in]  qPlusY  : state in the next neighbor cell along YDIR
  !! \param[in]  qMinusY : state in the previous neighbor cell along YDIR
  !! \param[out] dq      : reference to an array returning the X and Y slopes
  !!
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine slope_unsplit_hydro_2d(q, qNeigh, dq)

    implicit none

    ! dummy variables
    real(fp_kind), dimension(nbVar)   , intent(in)  :: q
    real(fp_kind), dimension(4, nbVar), intent(in)  :: qNeigh
    !real(fp_kind), dimension(nbVar)   , intent(in)  :: qPlusX
    !real(fp_kind), dimension(nbVar)   , intent(in)  :: qMinusX
    !real(fp_kind), dimension(nbVar)   , intent(in)  :: qPlusY
    !real(fp_kind), dimension(nbVar)   , intent(in)  :: qMinusY
    real(fp_kind), dimension(2,nbVar) , intent(out) :: dq

    ! local variables
    integer :: nvar
    real(fp_kind) ::  dlft, drgt, dcen, dsgn, slop, dlim

    ! alias to slopes vector (1 per dimension)
    real(fp_kind), dimension(nbvar) :: dqX
    real(fp_kind), dimension(nbVar) :: dqY

    if (d_slope_type==0) then

       do nVar=1,nbVar
          dqX(nVar) = ZERO_F
          dqY(nVar) = ZERO_F
       end do

    else if (d_slope_type==1 .or. d_slope_type==2) then ! minmod or average

       do nVar=1,nbVar

          ! slopes in first coordinate direction
          dlft = d_slope_type*(q     (nVar)   - qNeigh(2,nVar))
          drgt = d_slope_type*(qNeigh(1,nVar) - q       (nVar))
          dcen = HALF_F      *(qNeigh(1,nVar) - qNeigh(2,nVar))

          dsgn = -ONE_F
          if (dcen >= ZERO_F) dsgn = ONE_F

          slop = min( abs(dlft), abs(drgt) )
          dlim = slop
          if ( (dlft*drgt) <= ZERO_F ) dlim = ZERO_F

          dqX(nVar) = dsgn * min( dlim, abs(dcen) )

          ! slopes in second coordinate direction
          dlft = d_slope_type*(q       (nVar) - qNeigh(4,nVar))
          drgt = d_slope_type*(qNeigh(3,nVar) - q       (nVar))
          dcen = HALF_F      *(qNeigh(3,nVar) - qNeigh(4,nVar))

          dsgn = -ONE_F
          if (dcen >= ZERO_F)  dsgn = ONE_F

          slop = min( abs(dlft), abs(drgt) )
          dlim = slop
          if ( (dlft*drgt) <= ZERO_F ) dlim = ZERO_F

          dqY(nVar) = dsgn * min( dlim, abs(dcen) )

       end do ! end for nVar

    end if  ! end d_slope_type == 1 or 2

    dq(1,:) = dqX
    dq(2,:) = dqY

  end subroutine slope_unsplit_hydro_2d

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! Compute hydro slopes
  !!
  !! \param[in]  q       : current primitive variable state
  !! \param[in]  qPlusX  : state in the next neighbor cell along XDIR
  !! \param[in]  qMinusX : state in the previous neighbor cell along XDIR
  !! \param[in]  qPlusY  : state in the next neighbor cell along YDIR
  !! \param[in]  qMinusY : state in the previous neighbor cell along YDIR
  !! \param[out] dq      : reference to an array returning the X and Y slopes
  !!
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine slope_unsplit_hydro_2d_v2(q, qPlusX, qMinusX, qPlusY, qMinusY, dq)

    implicit none

    ! dummy variables
    real(fp_kind), dimension(nbVar)   , intent(in)  :: q
    real(fp_kind), dimension(nbVar)   , intent(in)  :: qPlusX
    real(fp_kind), dimension(nbVar)   , intent(in)  :: qMinusX
    real(fp_kind), dimension(nbVar)   , intent(in)  :: qPlusY
    real(fp_kind), dimension(nbVar)   , intent(in)  :: qMinusY
    real(fp_kind), dimension(2,nbVar) , intent(out) :: dq

    ! local variables
    integer :: nvar
    real(fp_kind) ::  dlft, drgt, dcen, dsgn, slop, dlim

    ! alias to slopes vector (1 per dimension)
    real(fp_kind), dimension(nbvar) :: dqX
    real(fp_kind), dimension(nbVar) :: dqY

    if (d_slope_type==0) then

       do nVar=1,nbVar
          dqX(nVar) = ZERO_F
          dqY(nVar) = ZERO_F
       end do

    else if (d_slope_type==1 .or. d_slope_type==2) then ! minmod or average

       do nVar=1,nbVar

          ! slopes in first coordinate direction
          dlft = d_slope_type*(q     (nVar) - qMinusX(nVar))
          drgt = d_slope_type*(qPlusX(nVar) - q      (nVar))
          dcen = HALF_F    *(qPlusX(nVar) - qMinusX(nVar))

          dsgn = -ONE_F
          if (dcen >= ZERO_F) dsgn = ONE_F

          slop = min( abs(dlft), abs(drgt) )
          dlim = slop
          if ( (dlft*drgt) <= ZERO_F ) dlim = ZERO_F

          dqX(nVar) = dsgn * min( dlim, abs(dcen) )

          ! slopes in second coordinate direction
          dlft = d_slope_type*(q     (nVar) - qMinusY(nVar))
          drgt = d_slope_type*(qPlusY(nVar) - q      (nVar))
          dcen = HALF_F    *(qPlusY(nVar) - qMinusY(nVar))

          dsgn = -ONE_F
          if (dcen >= ZERO_F)  dsgn = ONE_F

          slop = min( abs(dlft), abs(drgt) )
          dlim = slop
          if ( (dlft*drgt) <= ZERO_F ) dlim = ZERO_F

          dqY(nVar) = dsgn * min( dlim, abs(dcen) )

       end do ! end for nVar

    end if  ! end slope_type == 1 or 2

    dq(1,:) = dqX
    dq(2,:) = dqY

  end subroutine slope_unsplit_hydro_2d_v2

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! Riemann solver (compute fluxes at cell
  !! this is actually the approx solver
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine riemann_2d(qleft,qright,qgdnv,flux)

    implicit none

    ! dummy variables
    real(fp_kind), dimension(nbVar), intent(in)  :: qleft
    real(fp_kind), dimension(nbVar), intent(in)  :: qright
    real(fp_kind), dimension(nbVar), intent(out) :: qgdnv
    real(fp_kind), dimension(nbVar), intent(out) :: flux

    ! local variables
    integer :: iter

    ! Left variables
    real(fp_kind) :: rl,pl,ul

    ! Right variables
    real(fp_kind) :: rr,pr,ur

    ! other var
    real(fp_kind) :: cr, cl, wl, wr, pstar, pold, conv
    real(fp_kind) :: wwl, wwr, ql, qr, usl, usr, delp, sgnm
    real(fp_kind) :: ro, uo, po, wo, co
    real(fp_kind) :: ustar, rstar, cstar, spout, spin, ushock, scr, frac

    ! Pressure, density and velocity
    rl = max(qleft (ID), d_smallr)
    ul =     qleft (IU)
    pl = max(qleft (IP), rl*d_smallp)
    rr = max(qright(ID), d_smallr)
    ur =     qright(IU)
    pr = max(qright(IP), rr*d_smallp)

    ! Lagrangian sound speed
    cl = d_gamma0*pl*rl
    cr = d_gamma0*pr*rr

    ! First guess
    wl = sqrt(cl)
    wr = sqrt(cr)
    pstar = max(((wr*pl+wl*pr)+wl*wr*(ul-ur))/(wl+wr), ZERO_F)
    pold = pstar
    conv = ONE_F

    !  Newton-Raphson iterations to find pstar at the required accuracy
    iter = 0
    do while (iter < d_niter_riemann .and. conv > 1e-6)
       wwl = sqrt(cl*(ONE_F+d_gamma6*(pold-pl)/pl))
       wwr = sqrt(cr*(ONE_F+d_gamma6*(pold-pr)/pr))
       ql = 2.0*wwl*wwl*wwl/(wwl*wwl+cl)
       qr = 2.0*wwr*wwr*wwr/(wwr*wwr+cr)
       usl = ul-(pold-pl)/wwl
       usr = ur+(pold-pr)/wwr
       delp = max(qr*ql/(qr+ql)*(usl-usr),-pold)

       pold = pold+delp
       conv = abs(delp/(pold+d_smallpp)) ! Convergence indicator
       iter = iter + 1
    end do

    ! Star region pressure
    ! for a two-shock Riemann problem
    pstar = pold
    wl = sqrt(cl*(ONE_F+d_gamma6*(pstar-pl)/pl))
    wr = sqrt(cr*(ONE_F+d_gamma6*(pstar-pr)/pr))

    ! Star region velocity
    ! for a two shock Riemann problem
    ustar = HALF_F * (ul + (pl-pstar)/wl + ur - (pr-pstar)/wr)

    ! Left going or right going contact wave
    if (ustar >= 0) then
       sgnm = 1.0
    else
       sgnm = -1.0
    end if

    ! Left or right unperturbed state
    if (sgnm > ZERO_F) then
       ro = rl
       uo = ul
       po = pl
       wo = wl
    else
       ro = rr
       uo = ur
       po = pr
       wo = wr
    end if
    co = max(d_smallc, sqrt(abs(d_gamma0*po/ro)))

    ! Star region density (Shock, max prevents vacuum formation in star region)
    rstar = max( ro/(ONE_F+ro*(po-pstar)/(wo*wo)), d_smallr)
    ! Star region sound speed
    cstar = max( d_smallc, sqrt(abs(d_gamma0*pstar/rstar)) )

    ! Compute rarefaction head and tail speed
    spout  = co    - sgnm*uo
    spin   = cstar - sgnm*ustar

    ! Compute shock speed
    ushock = wo/ro - sgnm*uo

    if(pstar >= po) then
       spin  = ushock
       spout = ushock
    end if

    ! Sample the solution at x/t=0
    scr = max(spout-spin, d_smallc+abs(spout+spin))
    frac = HALF_F * (ONE_F + (spout + spin)/scr)

    !if (isnan(frac)) then
    !   frac = ZERO_F
    !else
    !   frac = SATURATE(frac)

    qgdnv(ID) = frac*rstar + (ONE_F-frac)*ro
    qgdnv(IU) = frac*ustar + (ONE_F-frac)*uo
    qgdnv(IP) = frac*pstar + (ONE_F-frac)*po

    if(spout < ZERO_F) then
       qgdnv(ID) = ro
       qgdnv(IU) = uo
       qgdnv(IP) = po
    end if

    if(spin > ZERO_F) then
       qgdnv(ID) = rstar
       qgdnv(IU) = ustar
       qgdnv(IP) = pstar
    end if

    ! transverse velocity
    if(sgnm > ZERO_F) then
       qgdnv(IV) = qleft(IV)
    else
       qgdnv(IV) = qright(IV)
    end if

    call cmpflx(qgdnv, flux)

  end subroutine riemann_2d

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! convert godunov state into flux
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine cmpflx(qgdnv, flux)
    implicit none

    ! dummy variables
    real(fp_kind), dimension(nbVar), intent(in)  :: qgdnv
    real(fp_kind), dimension(nbVar), intent(out) :: flux

    ! local variables
    real(fp_kind) :: entho, ekin, etot

    ! Compute fluxes
    ! Mass density
    flux(ID) = qgdnv(ID) * qgdnv(IU)

    ! Normal momentum
    flux(IU) = flux(ID) * qgdnv(IU) + qgdnv(IP)

    ! Transverse momentum 1
    flux(IV) = flux(ID) * qgdnv(IV)

    ! Total energy
    entho = 1.0 / (d_gamma0 - 1.0)
    ekin = HALF_F * qgdnv(ID) * (qgdnv(IU)*qgdnv(IU) + qgdnv(IV)*qgdnv(IV))
    etot = qgdnv(IP) * entho + ekin
    flux(IP) = qgdnv(IU) * (etot + qgdnv(IP))

  end subroutine cmpflx

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! Riemann solver (compute fluxes at cell
  !! this is actually the HLLC solver
  !! TODO : add solver approx
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  attributes(device) subroutine riemann_2d_hllc(qleft,qright,qgdnv,flux)

    implicit none

    ! dummy variables
    real(fp_kind), dimension(nbVar), intent(in)  :: qleft
    real(fp_kind), dimension(nbVar), intent(in)  :: qright
    real(fp_kind), dimension(nbVar), intent(out) :: qgdnv
    real(fp_kind), dimension(nbVar), intent(out) :: flux

    ! local variables
    real(fp_kind) :: entho
    real(fp_kind) :: ustar, ptotstar, ro, uo, ptoto, etoto

    ! Left variables
    real(fp_kind) :: rl,pl,ul, ecinl, etotl, ptotl
    real(fp_kind) :: cfastl, SL, rcl, rstarl, etotstarl

    ! Right variables
    real(fp_kind) :: rr,pr,ur, ecinr, etotr, ptotr
    real(fp_kind) :: cfastr, SR, rcr, rstarr, etotstarr

    real(fp_kind) :: rcsum

    ! constant
    entho = ONE_F / (d_gamma0 - ONE_F)

    ! compute left and right variables
    rl = max(qleft(ID), d_smallr)
    pl = max(qleft(IP), rl*d_smallp)
    ul =     qleft(IU)

    ecinl =         HALF_F*rl*ul*ul
    ecinl = ecinl + HALF_F*rl*qleft(IV)*qleft(IV)

    etotl = pl*entho+ecinl
    ptotl = pl

    rr = max(qright(ID), d_smallr)
    pr = max(qright(IP), rr*d_smallp)
    ur =     qright(IU)

    ecinr =         HALF_F*rr*ur*ur
    ecinr = ecinr + HALF_F*rr*qright(IV)*qright(IV)

    etotr = pr*entho+ecinr
    ptotr = pr

    ! Find the largest eigenvalues in the normal direction to the interface
    cfastl = sqrt(max(d_gamma0*pl/rl,d_smallc*d_smallc))
    cfastr = sqrt(max(d_gamma0*pr/rr,d_smallc*d_smallc))

    ! Compute HLL wave speed
    SL = min(ul,ur) - max(cfastl,cfastr)
    SR = max(ul,ur) + max(cfastl,cfastr)

    ! Compute lagrangian sound speed
    rcl = rl*(ul-SL)
    rcr = rr*(SR-ur)
    rcsum = max(rcl+rcr,d_smallr)

    ! Compute acoustic star state
    ustar    = (rcr*ur   +rcl*ul   +  (ptotl-ptotr))/(rcr+rcl)
    ptotstar = (rcr*ptotl+rcl*ptotr+rcl*rcr*(ul-ur))/(rcr+rcl)

    ! Left star region variables
    rstarl    = rl*(SL-ul)/(SL-ustar)
    etotstarl = ((SL-ul)*etotl-ptotl*ul+ptotstar*ustar)/(SL-ustar)

    ! Right star region variables
    rstarr    = rr*(SR-ur)/(SR-ustar)
    etotstarr = ((SR-ur)*etotr-ptotr*ur+ptotstar*ustar)/(SR-ustar)

    ! Sample the solution at x/t=0

    if (SL > ZERO_F) then
       ro=rl
       uo=ul
       ptoto=ptotl
       etoto=etotl
    else if (ustar > ZERO_F) then
       ro=rstarl
       uo=ustar
       ptoto=ptotstar
       etoto=etotstarl
    else if (SR > ZERO_F) then
       ro=rstarr
       uo=ustar
       ptoto=ptotstar
       etoto=etotstarr
    else
       ro=rr
       uo=ur
       ptoto=ptotr
       etoto=etotr
    end if

    qgdnv=0

    ! Compute the Godunov flux
    flux(ID) = ro*uo
    flux(IU) = ro*uo*uo+ptoto
    flux(IP) = (etoto+ptoto)*uo
    if (flux(ID) > ZERO_F) then
       flux(IV) = flux(ID)*qleft(IV)
    else
       flux(IV) = flux(ID)*qright(IV)
    end if

  end subroutine riemann_2d_hllc

end module HydroUtils_gpu
