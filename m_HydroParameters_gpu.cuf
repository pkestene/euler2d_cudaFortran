!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! Author: P. Kestener, CEA Saclay
!!
!!
!! This software is governed by the CeCILL license under French law and
!! abiding by the rules of distribution of free software.  You can  use, 
!! modify and/ or redistribute the software under the terms of the CeCILL
!! license as circulated by CEA, CNRS and INRIA at the following URL
!! "http://www.cecill.info".
!!
!! The fact that you are presently reading this means that you have had
!! knowledge of the CeCILL license and that you accept its terms.

module HydroParameters_gpu

  use HydroPrecision
  use HydroConstants
  use HydroParameters

  use cudaFor

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! NOTE the naming convention:
  !! prefix h_ for host variables
  !! prefix d_ for device variable (so that all variables with constant
  !! attribute are device variables)
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! DEVICE constants (allocated in constant memory, used in device routines)
  !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  !! geometry parameters (device)
  integer(int_kind), constant :: d_nx       !< logical size along X (without ghost cells).
  integer(int_kind), constant :: d_ny       !< logical size along Y (without ghost cells).
  integer(int_kind), constant :: d_imin     !< index minimum at X border
  integer(int_kind), constant :: d_imax     !< index maximum at X border
  integer(int_kind), constant :: d_jmin     !< index minimum at Y border
  integer(int_kind), constant :: d_jmax     !< index maximum at Y border

  integer(int_kind), constant :: d_isize    !< total size (in cell unit) along X direction with ghosts.
  integer(int_kind), constant :: d_jsize    !< total size (in cell unit) along Y direction with ghosts.

  real(fp_kind),    constant  :: d_dx       !< x resolution
  real(fp_kind),    constant  :: d_dy       !< y resolution

  integer(int_kind), constant :: d_boundary_type_xmin
  integer(int_kind), constant :: d_boundary_type_xmax
  integer(int_kind), constant :: d_boundary_type_ymin
  integer(int_kind), constant :: d_boundary_type_ymax


  real   (fp_kind), constant :: d_gamma0        !< specific heat capacity ratio (adiabatic index)
  real   (fp_kind), constant :: d_gamma6
  real   (fp_kind), constant :: d_cfl           !< Courant-Friedrich-Lewy parameter.
  real   (fp_kind), constant :: d_slope_type    !< type of slope computation (2 for second order scheme).

  integer(int_kind),  constant :: d_iorder        !<
  real   (fp_kind),   constant :: d_smallr        !< small density cut-off
  real   (fp_kind),   constant :: d_smallc        !< small speed of sound cut-off
  real   (fp_kind),   constant :: d_smallp        !< small pressure cut-off
  real   (fp_kind),   constant :: d_smallpp       !< smallp times smallr
  integer(int_kind),  constant :: d_niter_riemann !< number of iteration usd in quasi-exact riemann solver

  contains

    subroutine initHydroParameters_gpu()

      implicit none

      !! perform regular initialization on CPU
      call initHydroParameters()

      !! copy host constants into device constants
      d_nx    = nx
      d_ny    = ny
      d_imin  = imin
      d_imax  = imax
      d_jmin  = jmin
      d_jmax  = jmax
      d_isize = isize
      d_jsize = jsize

      d_dx = dx
      d_dy = dy

      d_boundary_type_xmin = boundary_type_xmin
      d_boundary_type_xmax = boundary_type_xmax
      d_boundary_type_ymin = boundary_type_ymin
      d_boundary_type_ymax = boundary_type_ymax

      d_gamma0      = gamma0
      d_gamma6      = gamma6
      d_cfl         = cfl
      d_slope_type  = slope_type
      d_iorder      = iorder
      d_smallr      = smallr
      d_smallc      = smallc
      d_smallp      = smallp
      d_smallpp     = smallpp
      d_niter_riemann = niter_riemann

    end subroutine initHydroParameters_gpu


end module HydroParameters_gpu
